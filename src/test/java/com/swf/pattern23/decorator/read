装饰模式:
就是给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例.
案例中source就是一个被装饰的类、sourceable为公共接口，Decorator 就是一个装饰类

装饰器模式的应用场景：
1、需要扩展一个类的功能。
2、动态的为一个对象增加功能，而且还能动态撤销。（继承不能做到这一点，继承的功能是静态的，不能动态增删。）

缺点：产生过多相似的对象，不易排错！

装饰类型是在同一个实现接口的类中，在被装饰者方法的前后添加装饰，而在主体部分还是依照被装饰者的执行，装饰者只是在方法的前后进行一些装饰，可动态扩展、删除